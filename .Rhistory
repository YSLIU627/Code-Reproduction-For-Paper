}
return(gap)
}
svm_CD_per_epoch(svm.p.ada.gap,A.ionosphere,y.ionosphere, step0 = 30)
svm_save_result(svm_CD_each_iter, "uni", sample_p = svm.p.uniform,A = A.ionosphere,y = y.ionosphere,step0 = 30)
svm_save_result(svm_CD_each_iter, "ssuni", sample_p = svm.p.ada.uniform,A = A.ionosphere,y = y.ionosphere,step0 = 30, sigma = 1)
svm_save_result(svm_CD_each_iter, "adative", sample_p = svm.p.ada.uniform,A = A.ionosphere,y = y.ionosphere,step0 = 30, sigma = 0)
svm_save_result(svm_CD_each_iter, "adauni", sample_p = svm.p.ada.uniform,A = A.ionosphere,y = y.ionosphere,step0 = 30, sigma = 0.5)
svm_save_result(svm_CD_each_iter, "imp", sample_p = svm.p.imp,A = A.ionosphere,y = y.ionosphere,step0 = 30)
svm_save_result(svm_CD_each_iter, "adagap", sample_p = svm.p.ada.gap,A = A.ionosphere,y = y.ionosphere,step0 = 30)
svm_save_result(svm_CD_per_epoch, "epoch_uni", sample_p = svm.p.uniform,A = A.ionosphere,y = y.ionosphere,step0 = 30)
svm_save_result(svm_CD_per_epoch, "epoch_imp", sample_p = svm.p.imp,A = A.ionosphere,y = y.ionosphere,step0 = 30)
svm_save_result(svm_CD_per_epoch, "epoch_adagap", sample_p = svm.p.ada.gap,A = A.ionosphere,y = y.ionosphere,step0 = 30)
gap.adagap.e <- process_result(read.csv("svm/epoch_adagap_gap.csv"))[-1]
gap.uni.e <- process_result(read.csv("svm/epoch_uni_gap.csv"))[-1]
gap.imp.e <- process_result(read.csv("svm/epoch_imp_gap.csv"))[-1]
loss.adagap.e <- process_result(read.csv("svm/epoch_adagap_loss.csv"))[-1]
loss.uni.e <- process_result(read.csv("svm/epoch_uni_loss.csv"))[-1]
loss.imp.e <- process_result(read.csv("svm/epoch_imp_loss.csv"))[-1]
gap.adagap.e <- c(gap0,gap.adagap.e[1:9])
gap.uni.e <- c(gap0,gap.uni.e[1:9])
gap.imp.e <- c(gap0,gap.imp.e[1:9])
loss.adagap.e <- c(loss0,loss.adagap.e[1:9])
loss.uni.e <- c(loss0,loss.uni.e[1:9])
loss.imp.e <- c(loss0,loss.imp.e[1:9])
jpeg("figure/ionosphere1.jpeg",width = 1200)
par(mfrow = c(1,2))
plot(1:10, gap.adagap.e, col = "gold", xlab = "Epochs", ylab = "log of dual gap", type = "l",main = "dual gap of ionosphere", lwd = 2)
lines(1:10, gap.imp.e, col = "orangered", xlab = "Epochs", ylab = "log of dual gap", lwd =2 )
lines(1:10, gap.uni.e, col = "dodgerblue", xlab = "Epochs", ylab = "log of dual gap", type = "l", lwd =2)
legend("topright", col = c("dodgerblue","orangered","gold"),lwd=2,lty = 1, legend = c("uniform","importance", "gap-per-epoch"))
plot(1:10, loss.adagap.e, col = "gold", xlab = "Epochs", ylab = "value of objective function", type = "l", main = "objective function value of ionosphere",lwd = 2)
lines(1:10, loss.imp.e, col = "orangered", lwd = 2)
lines(1:10, loss.uni.e, col = "dodgerblue", lwd =2)
legend("topright", col = c("dodgerblue","orangered","gold"),lwd=2,lty = 1, legend = c("uniform","importance", "gap-per-epoch"))
dev.off()
gap0 <- 0
w <- A.ionosphere%*%rep(1,351)/0.1/((351)^2)
for (i in 1:351){
gap0 <- gap0 + svm.gap(rep(1,351),0.1,A.ionosphere,i,y.ionosphere,w)
}
gap0 <- log(gap0)
loss0 <- svm.loss(A.ionosphere, rep(1,351), 0.1, y.ionosphere )
gap.adagap.e <- process_result(read.csv("svm/epoch_adagap_gap.csv"))[-1]
gap.uni.e <- process_result(read.csv("svm/epoch_uni_gap.csv"))[-1]
gap.imp.e <- process_result(read.csv("svm/epoch_imp_gap.csv"))[-1]
loss.adagap.e <- process_result(read.csv("svm/epoch_adagap_loss.csv"))[-1]
loss.uni.e <- process_result(read.csv("svm/epoch_uni_loss.csv"))[-1]
loss.imp.e <- process_result(read.csv("svm/epoch_imp_loss.csv"))[-1]
gap.adagap.e <- c(gap0,gap.adagap.e[1:9])
gap.uni.e <- c(gap0,gap.uni.e[1:9])
gap.imp.e <- c(gap0,gap.imp.e[1:9])
loss.adagap.e <- c(loss0,loss.adagap.e[1:9])
loss.uni.e <- c(loss0,loss.uni.e[1:9])
loss.imp.e <- c(loss0,loss.imp.e[1:9])
jpeg("figure/ionosphere1.jpeg",width = 1200)
par(mfrow = c(1,2))
plot(1:10, gap.adagap.e, col = "gold", xlab = "Epochs", ylab = "log of dual gap", type = "l",main = "dual gap of ionosphere", lwd = 2)
lines(1:10, gap.imp.e, col = "orangered", xlab = "Epochs", ylab = "log of dual gap", lwd =2 )
lines(1:10, gap.uni.e, col = "dodgerblue", xlab = "Epochs", ylab = "log of dual gap", type = "l", lwd =2)
legend("topright", col = c("dodgerblue","orangered","gold"),lwd=2,lty = 1, legend = c("uniform","importance", "gap-per-epoch"))
plot(1:10, loss.adagap.e, col = "gold", xlab = "Epochs", ylab = "value of objective function", type = "l", main = "objective function value of ionosphere",lwd = 2)
lines(1:10, loss.imp.e, col = "orangered", lwd = 2)
lines(1:10, loss.uni.e, col = "dodgerblue", lwd =2)
legend("topright", col = c("dodgerblue","orangered","gold"),lwd=2,lty = 1, legend = c("uniform","importance", "gap-per-epoch"))
dev.off()
gap.adagap.e <- process_result(read.csv("svm/adagap_gap.csv"))[-1]
gap.uni.e <- process_result(read.csv("svm/uni_gap.csv"))[-1]
gap.ssuni.e <- process_result(read.csv("svm/ssuni_gap.csv"))[-1]
gap.adative.e <- process_result(read.csv("svm/adative_gap.csv"))[-1]
gap.adauni.e <- process_result(read.csv("svm/adauni_gap.csv"))[-1]
loss.adagap.e <- process_result(read.csv("svm/adagap_loss.csv"))[-1]
loss.uni.e <- process_result(read.csv("svm/uni_loss.csv"))[-1]
loss.ssuni.e <- process_result(read.csv("svm/ssuni_loss.csv"))[-1]
loss.adative.e <- process_result(read.csv("svm/adative_loss.csv"))[-1]
loss.adauni.e <- process_result(read.csv("svm/adauni_loss.csv"))[-1]
gap.adagap.e <- c(gap0,gap.adagap.e[1:9])
gap.uni.e <- c(gap0,gap.uni.e[1:9])
gap.ssuni.e <- c(gap0,gap.ssuni.e[1:9])
gap.adative.e <- c(gap0,gap.adative.e[1:9])
gap.adauni.e <- c(gap0,gap.adauni.e[1:9])
loss.adagap.e <- c(loss0,loss.adagap.e[1:9])
loss.uni.e <- c(loss0,loss.uni.e[1:9])
loss.ssuni.e <- c(loss0,loss.ssuni.e[1:9])
loss.adative.e <- c(loss0,loss.adative.e[1:9])
loss.adauni.e <- c(loss0,loss.adauni.e[1:9])
jpeg("figure/ionosphere2.jpeg",width = 1200)
par(mfrow = c(1,2))
plot(1:10, gap.ssuni.e, col = "dodgerblue", xlab = "Epochs", ylab = "log of dual gap", type = "l",main = "dual gap of ionosphere",lwd = 2)
lines(1:10, gap.adative.e, col = "orangered", lwd = 2)
lines(1:10, gap.adauni.e, col = "gold", lwd = 2)
lines(1:10, gap.adagap.e, col = "purple", lwd = 2)
lines(1:10, gap.uni.e, col = "lightcyan3", lty = 2, lwd = 2)
legend("topright", col = c("dodgerblue","orangered","gold","purple","lightcyan3"),lty = c(1,1,1,1,2),lwd = 2, legend = c("supportSet-uniform","adative","ada-uniform","ada-gap","importance"))
plot(1:10, loss.ssuni.e, col = "dodgerblue", xlab = "Epochs", ylab = "value of objective function", type = "l",lwd=2, main = "objective function value of ionosphere")
lines(1:10, loss.adative.e, col = "orangered",lwd=2)
lines(1:10, loss.adauni.e, col = "gold",lwd=2)
lines(1:10, loss.adagap.e, col = "purple",lwd=2)
lines(1:10, loss.uni.e, col = "lightcyan3", lty = 2,lwd=2)
legend("topright", col = c("dodgerblue","orangered","gold","purple","lightcyan3"),lty = c(1,1,1,1,2),lwd = 2, legend = c("supportSet-uniform","adative","ada-uniform","ada-gap","uniform"))
dev.off()
jpeg("figure/ionosphere3.jpeg",width = 600)
plot(3:10, loss.ssuni.e[3:10], col = "dodgerblue", xlab = "Epochs", ylab = "value of objective function", type = "l",lwd=2, main = "objective function value of ionosphere")
lines(3:10, loss.adative.e[3:10], col = "orangered",lwd=2)
lines(3:10, loss.adauni.e[3:10], col = "gold",lwd=2)
lines(3:10, loss.adagap.e[3:10], col = "purple",lwd=2)
lines(3:10, loss.uni.e[3:10], col = "lightcyan3", lty = 2,lwd=2)
legend("topright", col = c("dodgerblue","orangered","gold","purple","lightcyan3"),lty = c(1,1,1,1,2),lwd = 2, legend = c("supportSet-uniform","adative","ada-uniform","ada-gap","uniform"))
dev.off()
svm.gap <- function(alpha,lambda = 0.1,A,dimension,y,w){
# 计算对偶gap
# A is a matrix
i <- dimension
n <- dim(A)[2]
#browser()
#w <- lasso.w_func(alpha,A,y)
gap <- positive(1-y[i]*sum(A[,i]*w))/n - alpha[i]*y[i]/n + alpha[i]*sum(A[,i]*w)
#browser()
if(gap < 0){
return(0)
}
return(gap)
}
knitr::opts_chunk$set(echo = TRUE)
B <- (norm(y.mushrooms,type = "2"))^2/0.05
gap0 <- 0
for (i in 1:112){
gap0 <- gap0 + lasso.gap(numeric(112),0.05,B,A.mushrooms,i,y.mushrooms)
}
gap0 <- log(gap0)
cat("B is",B, "\nlog of dual gap is",gap0)
B <- (norm(y.rcv1,type = "2"))^2/7e-4
gap0 <- 0
for (i in 1:dim(A.rcv1)[2]){
gap0 <- gap0 + lasso.gap(numeric(dim(A.rcv1)[2]),7e-4,B,A.rcv1,i,y.rcv1)
}
gap0 <- log(gap0)
cat("B is",B, "\nlog of dual gap is",gap0)
knitr::opts_chunk$set(echo = TRUE)
gap0 <- 0
w <- A.ionosphere%*%rep(1,351)/0.1/((351)^2)
for (i in 1:351){
gap0 <- gap0 + svm.gap(rep(1,351),0.1,A.ionosphere,i,y.ionosphere,w)
}
gap0 <- log(gap0)
loss0 <- svm.loss(A.ionosphere, rep(1,351), 0.1, y.ionosphere )
gap.adagap.e <- process_result(read.csv("svm/adagap_gap.csv"))[-1]
gap.uni.e <- process_result(read.csv("svm/uni_gap.csv"))[-1]
gap.ssuni.e <- process_result(read.csv("svm/ssuni_gap.csv"))[-1]
gap.adative.e <- process_result(read.csv("svm/adative_gap.csv"))[-1]
gap.adauni.e <- process_result(read.csv("svm/adauni_gap.csv"))[-1]
loss.adagap.e <- process_result(read.csv("svm/adagap_loss.csv"))[-1]
loss.uni.e <- process_result(read.csv("svm/uni_loss.csv"))[-1]
loss.ssuni.e <- process_result(read.csv("svm/ssuni_loss.csv"))[-1]
loss.adative.e <- process_result(read.csv("svm/adative_loss.csv"))[-1]
loss.adauni.e <- process_result(read.csv("svm/adauni_loss.csv"))[-1]
gap.adagap.e <- c(gap0,gap.adagap.e[1:9])
gap.uni.e <- c(gap0,gap.uni.e[1:9])
gap.ssuni.e <- c(gap0,gap.ssuni.e[1:9])
gap.adative.e <- c(gap0,gap.adative.e[1:9])
gap.adauni.e <- c(gap0,gap.adauni.e[1:9])
loss.adagap.e <- c(loss0,loss.adagap.e[1:9])
loss.uni.e <- c(loss0,loss.uni.e[1:9])
loss.ssuni.e <- c(loss0,loss.ssuni.e[1:9])
loss.adative.e <- c(loss0,loss.adative.e[1:9])
loss.adauni.e <- c(loss0,loss.adauni.e[1:9])
jpeg("figure/ionosphere2.jpeg",width = 1200)
par(mfrow = c(1,2))
plot(1:10, gap.ssuni.e, col = "dodgerblue", xlab = "Epochs", ylab = "log of dual gap", type = "l",main = "dual gap of ionosphere",lwd = 2)
lines(1:10, gap.adative.e, col = "orangered", lwd = 2)
lines(1:10, gap.adauni.e, col = "gold", lwd = 2)
lines(1:10, gap.adagap.e, col = "purple", lwd = 2)
lines(1:10, gap.uni.e, col = "lightcyan3", lty = 2, lwd = 2)
legend("topright", col = c("dodgerblue","orangered","gold","purple","lightcyan3"),lty = c(1,1,1,1,2),lwd = 2, legend = c("supportSet-uniform","adative","ada-uniform","ada-gap","uniform"))
plot(1:10, loss.ssuni.e, col = "dodgerblue", xlab = "Epochs", ylab = "value of objective function", type = "l",lwd=2, main = "objective function value of ionosphere")
lines(1:10, loss.adative.e, col = "orangered",lwd=2)
lines(1:10, loss.adauni.e, col = "gold",lwd=2)
lines(1:10, loss.adagap.e, col = "purple",lwd=2)
lines(1:10, loss.uni.e, col = "lightcyan3", lty = 2,lwd=2)
legend("topright", col = c("dodgerblue","orangered","gold","purple","lightcyan3"),lty = c(1,1,1,1,2),lwd = 2, legend = c("supportSet-uniform","adative","ada-uniform","ada-gap","uniform"))
dev.off()
knitr::opts_chunk$set(echo = TRUE)
svm_CD_per_epoch <- function(sample_p,A,y,lambda = 0.1,step0 = 0.1,...)
{
record_length <- 10
epoch <- dim(A)[2]
n <- dim(A)[2]
#alpha <- numeric(n)
#w <- numeric(length = dim(A)[1])
alpha <- rep(10,n)
w <- A%*%alpha/lambda/n^2
max_iter <- epoch*record_length
record.gap <- numeric(length=record_length)
record.loss <- numeric(length=record_length)
gap <- numeric(n)
# A,y are given data
p = sample_p(alpha = alpha,A=A,y=y,lambda=lambda,w = w,...)
iter <- 0
while(iter < max_iter){
iter <- iter+1
i <- sample(1:n,size = 1,prob = p)
#update <- y[i]*max(0,min(1,y[i]*alpha[i]+(1-y[i]*sum(A[,i]*w))/(sum(A[,i]**2)/(lambda*n)))) - alpha[i]
#alpha[i] <- update +alpha[i]
#w <- w + A[,i]*update/(lambda*n)
grad <- -y[i]/n + sum(as.vector(A%*%alpha)*A[,i])/lambda/(n^2)
alpha[i] <- alpha[i]- step0*grad
w <- A%*%alpha/lambda/n^2
#browser()
if(iter%%epoch==0){
k <- iter/epoch
for(j in 1:n){
gap[j] <- svm.gap(alpha = alpha, A = A, y = y, dimension = j, w = w, lambda = lambda)
}
record.gap[k] <- sum(gap)
record.loss[k] <- svm.loss(A, alpha, lambda,y)
#browser()
p = sample_p(alpha = alpha,A=A,y=y,lambda=lambda,w = w,...)
}
}
result <- list(dual.gap = log(record.gap), svm = record.loss)
#browser()
return (result)
}
knitr::opts_chunk$set(echo = TRUE)
svm_CD_each_iter <- function(sample_p,A,y,lambda = 0.1,step0 = 0.1,...)
{
record_length <- 10
epoch <- dim(A)[2]
n <- dim(A)[2]
#alpha <- numeric(n)
#w <- numeric(length = dim(A)[1])
alpha <- rep(10,n)
w <- A%*%alpha/lambda/n^2
max_iter <- epoch*record_length
record.gap <- numeric(length=record_length)
record.loss <- numeric(length=record_length)
gap <- numeric(n)
# A,y are given data
iter <- 0
while(iter < max_iter){
iter <- iter+1
#browser()
p = sample_p(alpha = alpha,A=A,y=y,lambda=lambda,w = w,...)
#browser()
i <- sample(1:n,size = 1,prob = p)
#update <- y[i]*max(0,min(1,y[i]*alpha[i]+(1-y[i]*sum(A[,i]*w))/(sum(A[,i]**2)/(lambda*n)))) - alpha[i]
#alpha[i] <- update +alpha[i]
#w <- w + A[,i]*update/(lambda*n)
grad <- -y[i]/n + sum(as.vector(A%*%alpha)*A[,i])/lambda/(n^2)
alpha[i] <- alpha[i]- step0*grad
w <- A%*%alpha/lambda/n^2
#browser()
if(iter%%epoch==0){
k <- iter/epoch
for(j in 1:n){
gap[j] <- svm.gap(alpha = alpha, A = A, y = y, dimension = j, w = w, lambda = lambda)
}
record.gap[k] <- sum(gap)
record.loss[k] <- svm.loss(A, alpha, lambda,y)
#browser()
}
}
result <- list(dual.gap = log(record.gap), svm = record.loss)
#browser()
return (result)
}
svm_CD_per_epoch(svm.p.ada.gap,A.ionosphere,y.ionosphere, step0 = 30)
svm_CD_per_epoch(svm.p.ada.gap,A.ionosphere,y.ionosphere, step0 = 30)
svm_CD_per_epoch(svm.p.ada.gap,A.ionosphere,y.ionosphere, step0 = 30)
svm_CD_per_epoch(svm.p.ada.gap,A.ionosphere,y.ionosphere, step0 = 30)
svm_CD_per_epoch(svm.p.ada.gap,A.ionosphere,y.ionosphere, step0 = 30)
svm_CD_per_epoch(svm.p.ada.uniform,A.ionosphere,y.ionosphere, step0 = 30)
svm_CD_per_epoch(svm.p.uniform,A.ionosphere,y.ionosphere, step0 = 30)
svm_CD_per_epoch(svm.p.uniform,A.ionosphere,y.ionosphere, step0 = 30)
svm_CD_per_epoch(svm.p.uniform,A.ionosphere,y.ionosphere, step0 = 30)
svm_CD_per_epoch(svm.p.uniform,A.ionosphere,y.ionosphere, step0 = 30)
svm_CD_per_epoch(svm.p.uniform,A.ionosphere,y.ionosphere, step0 = 30)
svm_CD_per_epoch(svm.p.uniform,A.ionosphere,y.ionosphere, step0 = 30)
svm_CD_per_epoch(svm.p.uniform,A.ionosphere,y.ionosphere, step0 = 30)
svm_CD_per_epoch(svm.p.uniform,A.ionosphere,y.ionosphere, step0 = 30)
svm_CD_per_epoch(svm.p.uniform,A.ionosphere,y.ionosphere, step0 = 30)
svm_CD_per_epoch(svm.p.uniform,A.ionosphere,y.ionosphere, step0 = 30)
svm_CD_per_epoch(svm.p.uniform,A.ionosphere,y.ionosphere, step0 = 30)
svm_CD_per_epoch(svm.p.uniform,A.ionosphere,y.ionosphere, step0 = 30)
svm_CD_per_epoch(svm.p.uniform,A.ionosphere,y.ionosphere, step0 = 30)
svm_CD_per_epoch(svm.p.uniform,A.ionosphere,y.ionosphere, step0 = 30)
svm_CD_per_epoch(svm.p.uniform,A.ionosphere,y.ionosphere, step0 = 30)
svm_CD_per_epoch(svm.p.uniform,A.ionosphere,y.ionosphere, step0 = 30)
svm_CD_per_epoch(svm.p.uniform,A.ionosphere,y.ionosphere, step0 = 30)
svm_CD_per_epoch(svm.p.uniform,A.ionosphere,y.ionosphere, step0 = 30)
svm_CD_per_epoch(svm.p.uniform,A.ionosphere,y.ionosphere, step0 = 30)
svm_CD_per_epoch(svm.p.uniform,A.ionosphere,y.ionosphere, step0 = 30)
svm_CD_per_epoch(svm.p.uniform,A.ionosphere,y.ionosphere, step0 = 30)
svm_CD_per_epoch(svm.p.uniform,A.ionosphere,y.ionosphere, step0 = 30)
svm_CD_per_epoch(svm.p.uniform,A.ionosphere,y.ionosphere, step0 = 30)
svm_CD_per_epoch(svm.p.uniform,A.ionosphere,y.ionosphere, step0 = 30)
svm_CD_per_epoch(svm.p.uniform,A.ionosphere,y.ionosphere, step0 = 30)
svm_CD_per_epoch(svm.p.uniform,A.ionosphere,y.ionosphere, step0 = 30)
knitr::opts_chunk$set(echo = TRUE)
CD_each_iter <- function(sample_p,A,y,lambda,step0 = 0.1,...)
{
record_length <- 25
epoch <- dim(A)[2]
n <- dim(A)[2]
alpha <- numeric(n)
max_iter <- epoch*record_length
record.gap <- numeric(length=record_length)
record.loss <- numeric(length=record_length)
gap <- numeric(n)
ATA = t(A)%*%A
# A,y are given data
#browser()
B <- (norm(A%*%alpha - y,type = "2"))^2/lambda + sum(abs(alpha))
w <- lasso.w_func(alpha,A,y)
a0 =0
iter <- 0
while(iter < max_iter){
iter <- iter+1
i <- sample(1:n,size = 1,prob = sample_p(alpha = alpha,A=A,y=y,lambda=lambda,B=B,...))
#update <- lasso.subgrad(alpha = alpha,dimension =i ,A =A,y=y,lambda = lambda)
#inverses <- max(2*sum(A[,i]**2),1)
#alpha[i] <- alpha[i] - step0*update/inverses
alpha[i] <- lasso.soft_thresholding_Cov(alpha = alpha,dimension =i ,A =A,y=y,lambda = lambda,ATA = ATA,a0 =a0)
a0 <- mean(A%*%alpha-y)
if(iter%%epoch==0){
k <- iter/epoch
for(j in 1:n){
gap[j] <- lasso.gap(alpha, lambda, B, A, j,y=y)
}
record.gap[k] <- sum(gap)
record.loss[k] <- lasso.loss(A, alpha, y+a0)
#browser()
}
}
result <- list(dual.gap = log(record.gap), suboptimality = log(record.loss))
#browser()
print(alpha)
return (result)
}
CD_each_iter(sample_p = p.uniform,A = A.mushrooms,y = y.mushrooms,lambda = 0.05)
lasso.soft_thresholding_Cov <- function(alpha,lambda,A,dimension,y,a0,ATA =ATA,...){
n <- length(y)
i <- dimension
term1 <- sum(A[,i]*y)
term2 <- 0
for (k in which(alpha>0)){
term2 = term2 + ATA[k,i]*alpha[k]
}
term <- ((term1-term2)+sum(A[,i]^2)*alpha[i]-sum(A[,i])*a0)/n
factor <- sum((A^2)[,i])/n
if(abs(term) <= lambda){
update = 0
}else if(term>0){
update <- (term - lambda)/factor
}else{
update <- (term + lambda)/factor
}
return(update)
}
lasso.subgrad <- function(alpha,lambda,A,dimension,y,...){
#返回次梯度
i <- dimension
n <- length(alpha)
#alpha0 <- as.matrix(alpha)
# First calculate the subgrad of |alpha|, sub1
if (alpha[i] > 0 ){
sub1 <- lambda#alpha[i]/norm(alpha0,type = "O")
}
else if(alpha[i] < 0){
sub1 <- -lambda#alpha[i]/norm(alpha0,type = "O")
}
else {
seed <- 0#runif(1,-1,1)
sub1 <- lambda*seed #* alpha[i]/norm(alpha0,type = "O")
}
# Then calculate the grad of ||A\alpha -y||^2
#term <- vector(length =length(A[,1]))
#for (s in 1:n){
#  term <- term + as.vector(alpha[s]*A[,s])
#}
#sub2 <- t(A[,i]) %*% term + t(term) %*% A[,i] - t(y) %*% A[,i] - t(A[,i])%*% y
term <- 2*(A%*%alpha-y)
term <- as.vector(term)
sub2 <- sum(A[,i]*term)
subgrad = sub1 + sub2 #rowSums(sub2)
#browser()
return(subgrad)
}
CD_each_iter <- function(sample_p,A,y,lambda,step0 = 0.1,...)
{
record_length <- 25
epoch <- dim(A)[2]
n <- dim(A)[2]
alpha <- numeric(n)
max_iter <- epoch*record_length
record.gap <- numeric(length=record_length)
record.loss <- numeric(length=record_length)
gap <- numeric(n)
ATA = t(A)%*%A
# A,y are given data
#browser()
B <- (norm(A%*%alpha - y,type = "2"))^2/lambda + sum(abs(alpha))
w <- lasso.w_func(alpha,A,y)
a0 =0
iter <- 0
while(iter < max_iter){
iter <- iter+1
i <- sample(1:n,size = 1,prob = sample_p(alpha = alpha,A=A,y=y,lambda=lambda,B=B,...))
#update <- lasso.subgrad(alpha = alpha,dimension =i ,A =A,y=y,lambda = lambda)
#inverses <- max(2*sum(A[,i]**2),1)
#alpha[i] <- alpha[i] - step0*update/inverses
alpha[i] <- lasso.soft_thresholding_Cov(alpha = alpha,dimension =i ,A =A,y=y,lambda = lambda,ATA = ATA,a0 =a0)
a0 <- mean(A%*%alpha-y)
if(iter%%epoch==0){
k <- iter/epoch
for(j in 1:n){
gap[j] <- lasso.gap(alpha, lambda, B, A, j,y=y)
}
record.gap[k] <- sum(gap)
record.loss[k] <- lasso.loss(A, alpha, y+a0)
#browser()
}
}
result <- list(dual.gap = log(record.gap), suboptimality = log(record.loss))
#browser()
print(alpha)
return (result)
}
CD_each_iter(sample_p = p.uniform,A = A.mushrooms,y = y.mushrooms,lambda = 0.05)
CD_each_iter <- function(sample_p,A,y,lambda,step0 = 0.1,...)
{
record_length <- 25
epoch <- dim(A)[2]
n <- dim(A)[2]
alpha <- numeric(n)
max_iter <- epoch*record_length
record.gap <- numeric(length=record_length)
record.loss <- numeric(length=record_length)
gap <- numeric(n)
ATA = t(A)%*%A
# A,y are given data
#browser()
B <- (norm(A%*%alpha - y,type = "2"))^2/lambda + sum(abs(alpha))
w <- lasso.w_func(alpha,A,y)
a0 =0
iter <- 0
while(iter < max_iter){
iter <- iter+1
i <- sample(1:n,size = 1,prob = sample_p(alpha = alpha,A=A,y=y,lambda=lambda,B=B,...))
#update <- lasso.subgrad(alpha = alpha,dimension =i ,A =A,y=y,lambda = lambda)
#inverses <- max(2*sum(A[,i]**2),1)
#alpha[i] <- alpha[i] - step0*update/inverses
alpha[i] <- lasso.soft_thresholding_Cov(alpha = alpha,dimension =i ,A =A,y=y,lambda = lambda,ATA = ATA,a0 =a0)
a0 <- mean(A%*%alpha-y)
if(iter%%epoch==0){
k <- iter/epoch
for(j in 1:n){
gap[j] <- lasso.gap(alpha, lambda, B, A, j,y=y)
}
record.gap[k] <- sum(gap)
record.loss[k] <- lasso.loss(A, alpha, y+a0)
#browser()
}
}
result <- list(dual.gap = log(record.gap), suboptimality = log(record.loss))
#browser()
#print(alpha)
return (result)
}
CD_each_iter(sample_p = p.uniform,A = A.mushrooms,y = y.mushrooms,lambda = 0.05)
CD_each_iter <- function(sample_p,A,y,lambda,step0 = 0.1,...)
{
record_length <- 25
epoch <- dim(A)[2]
n <- dim(A)[2]
alpha <- numeric(n)
max_iter <- epoch*record_length
record.gap <- numeric(length=record_length)
record.loss <- numeric(length=record_length)
gap <- numeric(n)
ATA = t(A)%*%A
# A,y are given data
#browser()
B <- (norm(A%*%alpha - y,type = "2"))^2/lambda + sum(abs(alpha))
w <- lasso.w_func(alpha,A,y)
a0 =0
iter <- 0
while(iter < max_iter){
iter <- iter+1
i <- sample(1:n,size = 1,prob = sample_p(alpha = alpha,A=A,y=y,lambda=lambda,B=B,...))
#update <- lasso.subgrad(alpha = alpha,dimension =i ,A =A,y=y,lambda = lambda)
#inverses <- max(2*sum(A[,i]**2),1)
#alpha[i] <- alpha[i] - step0*update/inverses
alpha[i] <- lasso.soft_thresholding_Cov(alpha = alpha,dimension =i ,A =A,y=y,lambda = lambda,ATA = ATA,a0 =a0)
a0 <- mean(A%*%alpha-y)
if(iter%%epoch==0){
k <- iter/epoch
for(j in 1:n){
gap[j] <- lasso.gap(alpha, lambda, B, A, j,y=y)
}
record.gap[k] <- sum(gap)
record.loss[k] <- lasso.loss(A, alpha, y+a0)
#browser()
}
}
result <- list(dual.gap = log(record.gap), suboptimality = log(record.loss))
#browser()
#print(alpha)
return (result)
}
CD_each_iter(sample_p = p.uniform,A = A.mushrooms,y = y.mushrooms,lambda = 0.05)
CD_each_iter(sample_p = p.ada.gap,A = A.mushrooms,y = y.mushrooms,lambda = 0.05)
