k <- iter/epoch
for(j in 1:n){
gap[j] <- lasso.gap(alpha, lambda, B, A, j,y=y)
}
record.gap[k] <- sum(gap)
#browser()
}
}
return (log(record.gap))
}
#CD_each_iter(sample_p = p.uniform,A = A.mushrooms,y = y.mushrooms,lambda = 0.05)
CD_per_epoch <- function(sample_p,A,y,lambda,step0 = 0.001,...)
{
epoch <- dim(A)[2]
n <- dim(A)[2]
max_iter <- epoch*25
record.gap <- numeric(length=25)
gap <- numeric(n)
# A,y are given data
alpha <- numeric(length = n)
B <- (norm(A%*%alpha - y,type = "2"))/lambda
w <- lasso.w_func(alpha,A,y)
iter <- 0
p <- sample_p(alpha = alpha,A=A,y=y,lambda=lambda,B=B,...)
while(iter < max_iter){
iter <- iter+1
i <- sample(1:n,size = 1,prob = p)
# direction is a sample prob vector like alpha with only one none zero dim
direction = vector(length = n)
direction[i] = 1
update <- direction * lasso.subgrad(alpha = alpha,dimension =i ,A =A,y=y,lambda = lambda)
alpha <- alpha - step0*update
#browser()
# Record the result
if(iter%%epoch==0){
k <- iter/epoch
for(j in 1:n){
gap[j] <- lasso.gap(alpha, lambda, B, A, j,y=y)
}
record.gap[k] <- sum(gap)
p <- sample_p(alpha = alpha,A=A,y=y,lambda=lambda,B=B,...)
#browser()
}
}
return (log(record.gap))
}
CD_each_iter(sample_p = p.uniform,A = A.mushrooms,y = y.mushrooms,lambda = 0.05,step0 = 1)
alpha <- rep(1,112)
CD_each_iter(sample_p = p.uniform,A = A.mushrooms,y = y.mushrooms,lambda = 0.05,step0 = 1, alpha = alpha)
install.packages(glmnet)
install.packages("glmnet")
install.packages("glmnet")
library(glmnet)
library(Matrix)
library(glmnet)
knitr::opts_chunk$set(echo = TRUE)
glmnet.fit<- cv.glmnet( A.mushrooms,y.mushrooms ,family = "multinomial")
g.coef <- coef(glmnet.fit)
#CD_each_iter(sample_p = p.uniform,A = A.mushrooms,y = y.mushrooms,lambda = 0.05,step0 = 1)
typeof(g.coef)
g.coef
as.vector(g.coef)
typeof(as.vector(g.coef))
unlist
unlist(g.coef)
g.coef[1]
g.coef[[2]]
g.coef[[3]]
g.coef[[2]]
g.coef[[1,2]]
g.coef[[2]][1]
g.coef[[2]][2]
g.coef[[1]][2]
g.coef[[1]][1]
glmnet.fit<- cv.glmnet( A.mushrooms,y.mushrooms ,family = "multinomial")
glmnet.fit<- cv.glmnet( A.mushrooms,y.mushrooms ,family = "multinomial")
g.coef <- coef(glmnet.fit)
n=112
alpha = numeric(n)
for (mmm in 1:n){
alpha[mmm] = g.coef[[1]][mmm]
}
CD_each_iter(sample_p = p.uniform,A = A.mushrooms,y = y.mushrooms,lambda = 0.05,step0 = 1,alpha = alpha)
n=112
alpha1 = numeric(n)
for (mmm in 1:n){
alpha1[mmm] = g.coef[[1]][mmm]
}
CD_each_iter(sample_p = p.uniform,A = A.mushrooms,y = y.mushrooms,lambda = 0.05,step0 = 1,alpha = alpha1)
alpha
CD_each_iter <- function(sample_p,A,y,lambda,step0 = 0.1,alpha = numeric(112), ...)
{
epoch <- dim(A)[2]
n <- dim(A)[2]
max_iter <- epoch*25
record.gap <- numeric(length=25)
gap <- numeric(n)
# A,y are given data
B <- (norm(A%*%alpha - y,type = "2"))/lambda + lambda*sum(abs(alpha))
w <- lasso.w_func(alpha,A,y)
iter <- 0
while(iter < max_iter){
iter <- iter+1
i <- sample(1:n,size = 1,prob = sample_p(alpha = alpha,A=A,y=y,lambda=lambda,B=B,...))
# direction is a sample prob vector like alpha with only one none zero dim
direction = vector(length = n)
direction[i] = 1
update <- direction * lasso.subgrad(alpha = alpha,dimension =i ,A =A,y=y,lambda = lambda)
alpha <- alpha - step0*update/(2*sum(A[,i]^2))
#browser()
# Record the result
if(iter%%epoch==0){
k <- iter/epoch
for(j in 1:n){
gap[j] <- lasso.gap(alpha, lambda, B, A, j,y=y)
}
record.gap[k] <- sum(gap)
#browser()
}
}
return (log(record.gap))
}
#CD_each_iter(sample_p = p.uniform,A = A.mushrooms,y = y.mushrooms,lambda = 0.05)
CD_per_epoch <- function(sample_p,A,y,lambda,step0 = 0.001,...)
{
epoch <- dim(A)[2]
n <- dim(A)[2]
max_iter <- epoch*25
record.gap <- numeric(length=25)
gap <- numeric(n)
# A,y are given data
alpha <- numeric(length = n)
B <- (norm(A%*%alpha - y,type = "2"))/lambda
w <- lasso.w_func(alpha,A,y)
iter <- 0
p <- sample_p(alpha = alpha,A=A,y=y,lambda=lambda,B=B,...)
while(iter < max_iter){
iter <- iter+1
i <- sample(1:n,size = 1,prob = p)
# direction is a sample prob vector like alpha with only one none zero dim
direction = vector(length = n)
direction[i] = 1
update <- direction * lasso.subgrad(alpha = alpha,dimension =i ,A =A,y=y,lambda = lambda)
alpha <- alpha - step0*update
#browser()
# Record the result
if(iter%%epoch==0){
k <- iter/epoch
for(j in 1:n){
gap[j] <- lasso.gap(alpha, lambda, B, A, j,y=y)
}
record.gap[k] <- sum(gap)
p <- sample_p(alpha = alpha,A=A,y=y,lambda=lambda,B=B,...)
#browser()
}
}
return (log(record.gap))
}
n=112
alpha1 = numeric(n)
for (mmm in 1:n){
alpha1[mmm] = g.coef[[1]][mmm]
}
CD_each_iter(sample_p = p.uniform,A = A.mushrooms,y = y.mushrooms,lambda = 0.05,step0 = 1,alpha = alpha1)
n=112
alpha1 = numeric(n)
for (mmm in 1:n){
alpha1[mmm] = g.coef[[1]][mmm]
}
sum((A.mushrooms%*%alpha1-y.mushrooms)^2)
n=112
alpha1 = numeric(n)
for (mmm in 1:n){
alpha1[mmm] = g.coef[[1]][mmm]
}
sum((-A.mushrooms%*%alpha1-y.mushrooms)^2)
n=112
alpha1 = numeric(n)
for (mmm in 1:n){
alpha1[mmm] = g.coef[[1]][mmm]
}
sum((-y.mushrooms)^2)
n=112
alpha1 = numeric(n)
for (mmm in 1:n){
alpha1[mmm] = runif(1,-1,1)#g.coef[[1]][mmm]
}
sum((-y.mushrooms)^2)
n=112
alpha1 = numeric(n)
for (mmm in 1:n){
alpha1[mmm] = runif(1,-1,1)#g.coef[[1]][mmm]
}
sum((-y.mushrooms)^2)
n=112
alpha1 = numeric(n)
for (mmm in 1:n){
alpha1[mmm] = runif(1,-1,1)#g.coef[[1]][mmm]
}
sum((-y.mushrooms)^2)
n=112
alpha1 = numeric(n)
for (mmm in 1:n){
alpha1[mmm] = runif(1,-1,1)#g.coef[[1]][mmm]
}
sum((-y.mushrooms)^2)
n=112
alpha1 = numeric(n)
for (mmm in 1:n){
alpha1[mmm] = runif(1,-1,1)#g.coef[[1]][mmm]
}
sum((-y.mushrooms)^2)
n=112
alpha1 = numeric(n)
for (mmm in 1:n){
alpha1[mmm] = runif(1,-1,1)#g.coef[[1]][mmm]
}
sum((A.mushrooms%*%alpha1-y.mushrooms)^2)
n=112
alpha1 = numeric(n)
for (mmm in 1:n){
alpha1[mmm] = runif(1,-1,1)#g.coef[[1]][mmm]
}
sum((A.mushrooms%*%alpha1-y.mushrooms)^2)
n=112
alpha1 = numeric(n)
for (mmm in 1:n){
alpha1[mmm] = runif(1,-1,1)#g.coef[[1]][mmm]
}
sum((A.mushrooms%*%alpha1-y.mushrooms)^2)
n=112
alpha1 = numeric(n)
for (mmm in 1:n){
alpha1[mmm] = runif(1,-1,1)#g.coef[[1]][mmm]
}
sum((A.mushrooms%*%alpha1-y.mushrooms)^2)
n=112
alpha1 = numeric(n)
for (mmm in 1:n){
alpha1[mmm] = runif(1,-1,1)#g.coef[[1]][mmm]
}
sum((A.mushrooms%*%alpha1-y.mushrooms)^2)
n=112
alpha1 = numeric(n)
for (mmm in 1:n){
alpha1[mmm] = runif(1,-1,1)#g.coef[[1]][mmm]
}
sum((A.mushrooms%*%alpha1-y.mushrooms)^2)
n=112
alpha1 = numeric(n)
for (mmm in 1:n){
alpha1[mmm] = runif(1,-1,1)#g.coef[[1]][mmm]
}
sum((A.mushrooms%*%alpha1-y.mushrooms)^2)
n=112
alpha1 = numeric(n)
for (mmm in 1:n){
alpha1[mmm] = runif(1,-1,1)#g.coef[[1]][mmm]
}
sum((A.mushrooms%*%alpha1-y.mushrooms)^2)
n=112
alpha1 = numeric(n)
for (mmm in 1:n){
alpha1[mmm] = runif(1,-1,1)#g.coef[[1]][mmm]
}
sum((A.mushrooms%*%alpha1-y.mushrooms)^2)
n=112
alpha1 = numeric(n)
for (mmm in 1:n){
alpha1[mmm] = runif(1,-1,1)#g.coef[[1]][mmm]
}
sum((A.mushrooms%*%alpha1-y.mushrooms)^2)
n=112
alpha1 = numeric(n)
for (mmm in 1:n){
alpha1[mmm] = rnorm(1)#g.coef[[1]][mmm]
}
sum((A.mushrooms%*%alpha1-y.mushrooms)^2)
n=112
alpha1 = numeric(n)
for (mmm in 1:n){
alpha1[mmm] = rnorm(1)#g.coef[[1]][mmm]
}
sum((A.mushrooms%*%alpha1-y.mushrooms)^2)
n=112
alpha1 = numeric(n)
for (mmm in 1:n){
alpha1[mmm] = rnorm(1)#g.coef[[1]][mmm]
}
sum((A.mushrooms%*%alpha1-y.mushrooms)^2)
n=112
alpha1 = numeric(n)
for (mmm in 1:n){
alpha1[mmm] = rnorm(1)#g.coef[[1]][mmm]
}
sum((A.mushrooms%*%alpha1-y.mushrooms)^2)
n=112
alpha1 = numeric(n)
for (mmm in 1:n){
alpha1[mmm] = rnorm(1)#g.coef[[1]][mmm]
}
sum((A.mushrooms%*%alpha1-y.mushrooms)^2)
n=112
alpha1 = numeric(n)
for (mmm in 1:n){
alpha1[mmm] = rnorm(1)#g.coef[[1]][mmm]
}
sum((A.mushrooms%*%alpha1-y.mushrooms)^2)
n=112
alpha1 = numeric(n)
for (mmm in 1:n){
alpha1[mmm] = rnorm(1)#g.coef[[1]][mmm]
}
sum((A.mushrooms%*%alpha1-y.mushrooms)^2)
n=112
alpha1 = numeric(n)
for (mmm in 1:n){
alpha1[mmm] = rnorm(1)#g.coef[[1]][mmm]
}
sum((A.mushrooms%*%alpha1-y.mushrooms)^2)
n=112
alpha1 = numeric(n)
for (mmm in 1:n){
alpha1[mmm] = rnorm(1)#g.coef[[1]][mmm]
}
sum((A.mushrooms%*%alpha1-y.mushrooms)^2)
n=112
alpha1 = numeric(n)
for (mmm in 1:n){
alpha1[mmm] = rnorm(1)#g.coef[[1]][mmm]
}
sum((A.mushrooms%*%alpha1-y.mushrooms)^2)
n=112
alpha1 = numeric(n)
for (mmm in 1:n){
alpha1[mmm] = rnorm(1)#g.coef[[1]][mmm]
}
sum((A.mushrooms%*%alpha1-y.mushrooms)^2)
n=112
alpha1 = numeric(n)
for (mmm in 1:n){
alpha1[mmm] = rnorm(1,mean=1)#g.coef[[1]][mmm]
}
sum((A.mushrooms%*%alpha1-y.mushrooms)^2)
n=112
alpha1 = numeric(n)
for (mmm in 1:n){
alpha1[mmm] = rnorm(1,mean=1)#g.coef[[1]][mmm]
}
sum((A.mushrooms%*%alpha1-y.mushrooms)^2)
n=112
alpha1 = numeric(n)
for (mmm in 1:n){
alpha1[mmm] = rnorm(1,mean=1)#g.coef[[1]][mmm]
}
sum((A.mushrooms%*%alpha1-y.mushrooms)^2)
n=112
alpha1 = numeric(n)
for (mmm in 1:n){
alpha1[mmm] = rnorm(1,mean=1)#g.coef[[1]][mmm]
}
sum((A.mushrooms%*%alpha1-y.mushrooms)^2)
n=112
alpha1 = numeric(n)
for (mmm in 1:n){
alpha1[mmm] = rnorm(1,mean=-1)#g.coef[[1]][mmm]
}
sum((A.mushrooms%*%alpha1-y.mushrooms)^2)
n=112
alpha1 = numeric(n)
for (mmm in 1:n){
alpha1[mmm] = rnorm(1,mean=-1)#g.coef[[1]][mmm]
}
sum((A.mushrooms%*%alpha1-y.mushrooms)^2)
n=112
alpha1 = numeric(n)
for (mmm in 1:n){
alpha1[mmm] = rnorm(1,mean=-1)#g.coef[[1]][mmm]
}
sum((A.mushrooms%*%alpha1-y.mushrooms)^2)
n=112
alpha1 = numeric(n)
for (mmm in 1:n){
alpha1[mmm] = rnorm(1,mean=2)#g.coef[[1]][mmm]
}
sum((A.mushrooms%*%alpha1-y.mushrooms)^2)
n=112
alpha1 = numeric(n)
for (mmm in 1:n){
alpha1[mmm] = rnorm(1,mean=2)#g.coef[[1]][mmm]
}
sum((A.mushrooms%*%alpha1-y.mushrooms)^2)
n=112
alpha1 = numeric(n)
for (mmm in 1:n){
alpha1[mmm] = rnorm(1,mean=2)#g.coef[[1]][mmm]
}
sum((A.mushrooms%*%alpha1-y.mushrooms)^2)
n=112
alpha1 = numeric(n)
for (mmm in 1:n){
alpha1[mmm] = runif(1,0,1)#g.coef[[1]][mmm]
}
sum((A.mushrooms%*%alpha1-y.mushrooms)^2)
n=112
alpha1 = numeric(n)
for (mmm in 1:n){
alpha1[mmm] = runif(1,0,1)#g.coef[[1]][mmm]
}
sum((A.mushrooms%*%alpha1-y.mushrooms)^2)
n=112
alpha1 = numeric(n)
for (mmm in 1:n){
alpha1[mmm] = runif(1,0,1)#g.coef[[1]][mmm]
}
sum((A.mushrooms%*%alpha1-y.mushrooms)^2)
n=112
alpha1 = numeric(n)
for (mmm in 1:n){
alpha1[mmm] = runif(1,0,1)#g.coef[[1]][mmm]
}
sum((A.mushrooms%*%alpha1-y.mushrooms)^2)
n=112
alpha1 = numeric(n)
for (mmm in 1:n){
alpha1[mmm] = runif(1,0,1)#g.coef[[1]][mmm]
}
sum((A.mushrooms%*%alpha1-y.mushrooms)^2)
n=112
alpha1 = numeric(n)
for (mmm in 1:n){
alpha1[mmm] = runif(1,0,1)#g.coef[[1]][mmm]
}
sum((A.mushrooms%*%alpha1-y.mushrooms)^2)
n=112
alpha1 = numeric(n)
for (mmm in 1:n){
alpha1[mmm] = runif(1,0,1)#g.coef[[1]][mmm]
}
sum((A.mushrooms%*%alpha1-y.mushrooms)^2)
n=112
alpha1 = numeric(n)
for (mmm in 1:n){
alpha1[mmm] = runif(1,0,1)#g.coef[[1]][mmm]
}
sum((A.mushrooms%*%alpha1-y.mushrooms)^2)
n=112
alpha1 = numeric(n)
for (mmm in 1:n){
alpha1[mmm] = runif(1,-1,0)#g.coef[[1]][mmm]
}
sum((A.mushrooms%*%alpha1-y.mushrooms)^2)
n=112
alpha1 = numeric(n)
for (mmm in 1:n){
alpha1[mmm] = runif(1,-1,0)#g.coef[[1]][mmm]
}
sum((A.mushrooms%*%alpha1-y.mushrooms)^2)
n=112
alpha1 = numeric(n)
for (mmm in 1:n){
alpha1[mmm] = runif(1,-1,0)#g.coef[[1]][mmm]
}
sum((A.mushrooms%*%alpha1-y.mushrooms)^2)
n=112
alpha1 = numeric(n)
for (mmm in 1:n){
alpha1[mmm] = runif(1,-1,0)#g.coef[[1]][mmm]
}
sum((A.mushrooms%*%alpha1-y.mushrooms)^2)
n=112
alpha1 = numeric(n)
for (mmm in 1:n){
alpha1[mmm] = runif(1,-1,0)#g.coef[[1]][mmm]
}
sum((A.mushrooms%*%alpha1-y.mushrooms)^2)
n=112
alpha1 = numeric(n)
for (mmm in 1:n){
alpha1[mmm] = runif(1,-1,-0.5)#g.coef[[1]][mmm]
}
sum((A.mushrooms%*%alpha1-y.mushrooms)^2)
n=112
alpha1 = numeric(n)
for (mmm in 1:n){
alpha1[mmm] = runif(1,-1,-0.5)#g.coef[[1]][mmm]
}
sum((A.mushrooms%*%alpha1-y.mushrooms)^2)
n=112
alpha1 = numeric(n)
for (mmm in 1:n){
alpha1[mmm] = runif(1,-1,-0.5)#g.coef[[1]][mmm]
}
sum((A.mushrooms%*%alpha1-y.mushrooms)^2)
n=112
alpha1 = numeric(n)
for (mmm in 1:n){
alpha1[mmm] = runif(1,-1,-0.5)#g.coef[[1]][mmm]
}
sum((A.mushrooms%*%alpha1-y.mushrooms)^2)
n=112
alpha1 = numeric(n)
for (mmm in 1:n){
alpha1[mmm] = runif(1,-1,-0.5)#g.coef[[1]][mmm]
}
sum((A.mushrooms%*%alpha1-y.mushrooms)^2)
n=112
alpha1 = numeric(n)
for (mmm in 1:n){
alpha1[mmm] = runif(1,-1,-0.5)#g.coef[[1]][mmm]
}
sum((A.mushrooms%*%alpha1-y.mushrooms)^2)
