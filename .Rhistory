n <- dim(A)[2]
alpha <- numeric(n)
max_iter <- epoch*record_length
record.gap <- numeric(length=record_length)
record.loss <- numeric(length=record_length)
gap <- numeric(n)
# A,y are given data
#browser()
B <- (norm(A%*%alpha - y,type = "2"))^2/lambda + sum(abs(alpha))
w <- lasso.w_func(alpha,A,y)
iter <- 0
p <- sample_p(alpha = alpha, A = A, y = y, lambda = lambda, B = B, ...)
while(iter < max_iter){
iter <- iter+1
i <- sample(1:n,size = 1,prob = p)
# direction is a sample prob vector like alpha with only one none zero dim
direction = vector(length = n)
direction[i] = 1
update <- direction * lasso.subgrad(alpha = alpha,dimension =i ,A =A,y=y,lambda = lambda)
inverses <- max(2*sum(A[,i]**2),1)
#inverses <- 2*sum(A[,i]**2)
alpha <- alpha - step0*update/inverses
#browser()
# Record the result
if(iter%%epoch==0){
k <- iter/epoch
for(j in 1:n){
gap[j] <- lasso.gap(alpha, lambda, B, A, j,y=y)
}
record.gap[k] <- sum(gap)
#print(lasso.loss(A = A,alpha = alpha,y = y))
record.loss[k] <- lasso.loss(A, alpha, y)
p <- sample_p(alpha = alpha, A = A, y = y, lambda = lambda, B = B, ...)
#browser()
}
}
result <- list(dual.gap = log(record.gap), suboptimality = log(record.loss))
#browser()
return (result)
}
#CD_each_iter(sample_p = p.uniform,A = A.mushrooms,y = y.mushrooms,lambda = 0.05)
save_result <- function(CD, name, ...){
result.gap <- matrix(0,nrow = 5, ncol = 25)
result.loss <- matrix(0, nrow = 5, ncol = 25)
for (i in 1:5){
result <- CD(...)
result.gap[i,] <- result$dual.gap
result.loss[i,] <- result$suboptimality
}
name1 <- paste0("result/", name, "_gap.csv")
name2 <- paste0("result/", name, "_loss.csv")
write.csv(as.data.frame(result.gap),file = name1)
write.csv(as.data.frame(result.loss),file = name2)
}
#save_result(CD_each_iter, "uni_rcv", sample_p = p.uniform,A = A.rcv1,y = y.rcv1,lambda = 7e-4,step0 = 1)
save_result(CD_each_iter, "ssuni_rcv", sample_p = p.ada.uniform,A = A.rcv1,y = y.rcv1,lambda = 7e-4,step0 = 1, sigma = 1)
CD_each_iter <- function(sample_p,A,y,lambda,step0 = 0.1,...)
{
record_length <- 25
epoch <- dim(A)[2]
n <- dim(A)[2]
alpha <- numeric(n)
max_iter <- epoch*record_length
record.gap <- numeric(length=record_length)
record.loss <- numeric(length=record_length)
gap <- numeric(n)
# A,y are given data
#browser()
B <- (norm(A%*%alpha - y,type = "2"))^2/lambda + sum(abs(alpha))
w <- lasso.w_func(alpha,A,y)
iter <- 0
while(iter < max_iter){
iter <- iter+1
i <- sample(1:n,size = 1,prob = sample_p(alpha = alpha,A=A,y=y,lambda=lambda,B=B,...))
update <- lasso.subgrad(alpha = alpha,dimension =i ,A =A,y=y,lambda = lambda)
inverses <- max(2*sum(A[,i]**2),1)
#inverses <- 2*sum(A[,i]**2)
alpha[i] <- alpha[i] - step0*update/inverses
#alpha_ <- alpha - step0*update/inverses
#if (lasso.loss(A,alpha_,y) < lasso.loss(A,alpha,y) ){
#   alpha <- alpha_
#   iter <- iter+1
#}
#if (iter %%10 == 0){
#  print("w")
#  w <- lasso.w_func(alpha,A,y)
#  print(sum(w**2))}
#browser()
# Record the result
if(iter%%epoch==0){
k <- iter/epoch
for(j in 1:n){
gap[j] <- lasso.gap(alpha, lambda, B, A, j,y=y)
}
record.gap[k] <- sum(gap)
#print(lasso.loss(A = A,alpha = alpha,y = y))
record.loss[k] <- lasso.loss(A, alpha, y)
#browser()
}
}
result <- list(dual.gap = log(record.gap), suboptimality = log(record.loss))
#browser()
return (result)
}
#CD_each_iter(sample_p = p.uniform,A = A.mushrooms,y = y.mushrooms,lambda = 0.05)
CD_per_epoch <- function(sample_p,A,y,lambda,step0 = 0.1,...)
{
record_length <- 25
epoch <- dim(A)[2]
n <- dim(A)[2]
alpha <- numeric(n)
max_iter <- epoch*record_length
record.gap <- numeric(length=record_length)
record.loss <- numeric(length=record_length)
gap <- numeric(n)
# A,y are given data
#browser()
B <- (norm(A%*%alpha - y,type = "2"))^2/lambda + sum(abs(alpha))
w <- lasso.w_func(alpha,A,y)
iter <- 0
p <- sample_p(alpha = alpha, A = A, y = y, lambda = lambda, B = B, ...)
while(iter < max_iter){
iter <- iter+1
i <- sample(1:n,size = 1,prob = p)
update <- lasso.subgrad(alpha = alpha,dimension =i ,A =A,y=y,lambda = lambda)
inverses <- max(2*sum(A[,i]**2),1)
#inverses <- 2*sum(A[,i]**2)
alpha[i] <- alpha[i] - step0*update/inverses
#browser()
# Record the result
if(iter%%epoch==0){
k <- iter/epoch
for(j in 1:n){
gap[j] <- lasso.gap(alpha, lambda, B, A, j,y=y)
}
record.gap[k] <- sum(gap)
#print(lasso.loss(A = A,alpha = alpha,y = y))
record.loss[k] <- lasso.loss(A, alpha, y)
p <- sample_p(alpha = alpha, A = A, y = y, lambda = lambda, B = B, ...)
#browser()
}
}
result <- list(dual.gap = log(record.gap), suboptimality = log(record.loss))
#browser()
return (result)
}
#CD_each_iter(sample_p = p.uniform,A = A.mushrooms,y = y.mushrooms,lambda = 0.05)
set.seed(1)
n = 8000#10000
m = 300#1000
ind <- sample(1:20242, n)
feature <- sample(1:50000, m)
feature <- as.character(sort(feature))
rcv1 <- rcv1[ind]
A.rcv1 <- matrix(0,nrow = n, ncol = m)
colnames(A.rcv1) <- feature
y.rcv1 <- numeric(length = n)
a <- strsplit(rcv1, split = " ")
for(i in 1:n){
b <- a[[i]]
y.rcv1[i] <- as.numeric(b[1])
b <- b[-1]
len <- length(b)
c <- strsplit(b,split = ":")
for(j in 1:len){
colind <- c[[j]][1]
if(sum(colind==feature)==1){
val <- c[[j]][2]
val <- as.numeric(val)
A.rcv1[i,colind] <- val
}
}
}
set.seed(1)
ind <- sample(1:20242, 10000)
feature <- sample(1:50000, 1000)
feature <- as.character(sort(feature))
rcv1 <- rcv1[ind]
A.rcv1 <- matrix(0,nrow = 10000, ncol = 1000)
colnames(A.rcv1) <- feature
y.rcv1 <- numeric(length = 10000)
a <- strsplit(rcv1, split = " ")
for(i in 1:10000){
b <- a[[i]]
y.rcv1[i] <- as.numeric(b[1])
b <- b[-1]
len <- length(b)
c <- strsplit(b,split = ":")
for(j in 1:len){
colind <- c[[j]][1]
if(sum(colind==feature)==1){
val <- c[[j]][2]
val <- as.numeric(val)
A.rcv1[i,colind] <- val
}
}
}
set.seed(1)
ind <- sample(1:20242, 10000)
feature <- sample(1:50000, 1000)
feature <- as.character(sort(feature))
rcv1 <- rcv1[ind]
A.rcv1 <- matrix(0,nrow = 10000, ncol = 1000)
colnames(A.rcv1) <- feature
y.rcv1 <- numeric(length = 10000)
a <- strsplit(rcv1, split = " ")
for(i in 1:10000){
b <- a[[i]]
y.rcv1[i] <- as.numeric(b[1])
b <- b[-1]
len <- length(b)
c <- strsplit(b,split = ":")
for(j in 1:len){
colind <- c[[j]][1]
if(sum(colind==feature)==1){
val <- c[[j]][2]
val <- as.numeric(val)
A.rcv1[i,colind] <- val
}
}
}
knitr::opts_chunk$set(echo = TRUE)
save_result(CD_each_iter, "uni", sample_p = p.uniform,A = A.mushrooms,y = y.mushrooms,lambda = 0.05,step0 = 1)
save_result <- function(CD, name, ...){
result.gap <- matrix(0,nrow = 5, ncol = 25)
result.loss <- matrix(0, nrow = 5, ncol = 25)
for (i in 1:5){
result <- CD(...)
result.gap[i,] <- result$dual.gap
result.loss[i,] <- result$suboptimality
}
name1 <- paste0("result/", name, "_gap.csv")
name2 <- paste0("result/", name, "_loss.csv")
write.csv(as.data.frame(result.gap),file = name1)
write.csv(as.data.frame(result.loss),file = name2)
}
save_result(CD_each_iter, "uni", sample_p = p.uniform,A = A.mushrooms,y = y.mushrooms,lambda = 0.05,step0 = 1)
save_result(CD_each_iter, "ssuni", sample_p = p.ada.uniform,A = A.mushrooms,y = y.mushrooms,lambda = 0.05,step0 = 1,sigma=1)
CD_each_iter <- function(sample_p,A,y,lambda,step0 = 0.1,...)
{
record_length <- 25
epoch <- dim(A)[2]
n <- dim(A)[2]
alpha <- numeric(n)
max_iter <- epoch*record_length
record.gap <- numeric(length=record_length)
record.loss <- numeric(length=record_length)
gap <- numeric(n)
# A,y are given data
#browser()
B <- (norm(A%*%alpha - y,type = "2"))^2/lambda + sum(abs(alpha))
w <- lasso.w_func(alpha,A,y)
iter <- 0
while(iter < max_iter){
iter <- iter+1
i <- sample(1:n,size = 1,prob = sample_p(alpha = alpha,A=A,y=y,lambda=lambda,B=B,...))
update <- lasso.subgrad(alpha = alpha,dimension =i ,A =A,y=y,lambda = lambda)
inverses <- max(2*sum(A[,i]**2),1)
#inverses <- 2*sum(A[,i]**2)
alpha[i] <- alpha[i] - step0*update/inverses
#alpha_ <- alpha - step0*update/inverses
#if (lasso.loss(A,alpha_,y) < lasso.loss(A,alpha,y) ){
#   alpha <- alpha_
#   iter <- iter+1
#}
#if (iter %%10 == 0){
#  print("w")
#  w <- lasso.w_func(alpha,A,y)
#  print(sum(w**2))}
#browser()
# Record the result
if(iter%%epoch==0){
k <- iter/epoch
for(j in 1:n){
gap[j] <- lasso.gap(alpha, lambda, B, A, j,y=y)
}
record.gap[k] <- sum(gap)
#print(lasso.loss(A = A,alpha = alpha,y = y))
record.loss[k] <- lasso.loss(A, alpha, y)
#browser()
}
}
result <- list(dual.gap = log(record.gap), suboptimality = log(record.loss))
#browser()
return (result)
}
#CD_each_iter(sample_p = p.uniform,A = A.mushrooms,y = y.mushrooms,lambda = 0.05)
lasso.subgrad <- function(alpha,lambda,A,dimension,y,...){
#返回次梯度
i <- dimension
n <- length(alpha)
#alpha0 <- as.matrix(alpha)
# First calculate the subgrad of |alpha|, sub1
if (alpha[i] > 0 ){
sub1 <- lambda#alpha[i]/norm(alpha0,type = "O")
}
else if(alpha[i] < 0){
sub1 <- -lambda#alpha[i]/norm(alpha0,type = "O")
}
else {
seed <- 0#runif(1,-1,1)
sub1 <- lambda*seed #* alpha[i]/norm(alpha0,type = "O")
}
# Then calculate the grad of ||A\alpha -y||^2
#term <- vector(length =length(A[,1]))
#for (s in 1:n){
#  term <- term + as.vector(alpha[s]*A[,s])
#}
#sub2 <- t(A[,i]) %*% term + t(term) %*% A[,i] - t(y) %*% A[,i] - t(A[,i])%*% y
term <- 2*(A%*%alpha-y)
term <- as.vector(term)
sub2 <- sum(A[,i]*term)
subgrad = sub1 + sub2 #rowSums(sub2)
#browser()
return(subgrad)
}
save_result(CD_each_iter, "uni", sample_p = p.uniform,A = A.mushrooms,y = y.mushrooms,lambda = 0.05,step0 = 1)
set.seed(1)
ind <- sample(1:20242, 8000)
feature <- sample(1:50000, 300)
feature <- as.character(sort(feature))
rcv1 <- rcv1[ind]
A.rcv1 <- matrix(0,nrow = 8000, ncol = 300)
colnames(A.rcv1) <- feature
y.rcv1 <- numeric(length = 8000)
a <- strsplit(rcv1, split = " ")
for(i in 1:8000){
b <- a[[i]]
y.rcv1[i] <- as.numeric(b[1])
b <- b[-1]
len <- length(b)
c <- strsplit(b,split = ":")
for(j in 1:len){
colind <- c[[j]][1]
if(sum(colind==feature)==1){
val <- c[[j]][2]
val <- as.numeric(val)
A.rcv1[i,colind] <- val
}
}
}
set.seed(1)
ind <- sample(1:20242, 8000)
feature <- sample(1:50000, 300)
feature <- as.character(sort(feature))
rcv1 <- rcv1[ind]
A.rcv1 <- matrix(0,nrow = 8000, ncol = 300)
colnames(A.rcv1) <- feature
y.rcv1 <- numeric(length = 8000)
a <- strsplit(rcv1, split = " ")
for(i in 1:8000){
b <- a[[i]]
y.rcv1[i] <- as.numeric(b[1])
b <- b[-1]
len <- length(b)
c <- strsplit(b,split = ":")
for(j in 1:299){
colind <- c[[j]][1]
if(sum(colind==feature)==1){
val <- c[[j]][2]
val <- as.numeric(val)
A.rcv1[i,colind] <- val
}
}
}
set.seed(1)
ind <- sample(1:20242, 8000)
feature <- sample(1:50000, 300)
feature <- as.character(sort(feature))
rcv1 <- rcv1[ind]
A.rcv1 <- matrix(0,nrow = 8000, ncol = 300)
colnames(A.rcv1) <- feature
y.rcv1 <- numeric(length = 8000)
a <- strsplit(rcv1, split = " ")
for(i in 1:8000){
b <- a[[i]]
y.rcv1[i] <- as.numeric(b[1])
b <- b[-1]
len <- length(b)
c <- strsplit(b,split = ":")
browser()
for(j in 1:len){
colind <- c[[j]][1]
if(sum(colind==feature)==1){
val <- c[[j]][2]
val <- as.numeric(val)
A.rcv1[i,colind] <- val
}
}
}
b
set.seed(10)
ind <- sample(1:20242, 8000)
feature <- sample(1:50000, 300)
feature <- as.character(sort(feature))
rcv1 <- rcv1[ind]
A.rcv1 <- matrix(0,nrow = 8000, ncol = 300)
colnames(A.rcv1) <- feature
y.rcv1 <- numeric(length = 8000)
a <- strsplit(rcv1, split = " ")
for(i in 1:8000){
b <- a[[i]]
y.rcv1[i] <- as.numeric(b[1])
b <- b[-1]
len <- length(b)
c <- strsplit(b,split = ":")
#browser()
for(j in 1:len){
colind <- c[[j]][1]
if(sum(colind==feature)==1){
val <- c[[j]][2]
val <- as.numeric(val)
A.rcv1[i,colind] <- val
}
}
}
set.seed(100)
ind <- sample(1:20242, 8000)
feature <- sample(1:50000, 300)
feature <- as.character(sort(feature))
rcv1 <- rcv1[ind]
A.rcv1 <- matrix(0,nrow = 8000, ncol = 300)
colnames(A.rcv1) <- feature
y.rcv1 <- numeric(length = 8000)
a <- strsplit(rcv1, split = " ")
for(i in 1:8000){
b <- a[[i]]
y.rcv1[i] <- as.numeric(b[1])
b <- b[-1]
len <- length(b)
c <- strsplit(b,split = ":")
#browser()
for(j in 1:len){
colind <- c[[j]][1]
if(sum(colind==feature)==1){
val <- c[[j]][2]
val <- as.numeric(val)
A.rcv1[i,colind] <- val
}
}
}
knitr::opts_chunk$set(echo = TRUE)
set.seed(100)
ind <- sample(1:20242, 8000)
feature <- sample(1:50000, 300)
feature <- as.character(sort(feature))
rcv1 <- rcv1[ind]
A.rcv1 <- matrix(0,nrow = 8000, ncol = 300)
colnames(A.rcv1) <- feature
y.rcv1 <- numeric(length = 8000)
a <- strsplit(rcv1, split = " ")
for(i in 1:8000){
b <- a[[i]]
y.rcv1[i] <- as.numeric(b[1])
b <- b[-1]
len <- length(b)
c <- strsplit(b,split = ":")
#browser()
for(j in 1:len){
colind <- c[[j]][1]
if(sum(colind==feature)==1){
val <- c[[j]][2]
val <- as.numeric(val)
A.rcv1[i,colind] <- val
}
}
}
for(i in 1:0)
{}
for (i in 1:0)
y[i]
for(i in 1 : 0){y[i]}
tail(rcv1)
mushrooms <- readLines("https://www.csie.ntu.edu.tw/~cjlin/libsvmtools/datasets/binary/mushrooms")
rcv1 <- readLines("rcv1_train.binary")
ind <- sample(1:20242, 8000)
head(rcv1[ind])
set.seed(100)
ind <- sample(1:20242, 8000)
feature <- sample(1:50000, 300)
feature <- as.character(sort(feature))
rcv1 <- rcv1[ind]
A.rcv1 <- matrix(0,nrow = 8000, ncol = 300)
colnames(A.rcv1) <- feature
y.rcv1 <- numeric(length = 8000)
a <- strsplit(rcv1, split = " ")
for(i in 1:8000){
b <- a[[i]]
y.rcv1[i] <- as.numeric(b[1])
b <- b[-1]
len <- length(b)
c <- strsplit(b,split = ":")
#browser()
for(j in 1:len){
colind <- c[[j]][1]
if(sum(colind==feature)==1){
val <- c[[j]][2]
val <- as.numeric(val)
A.rcv1[i,colind] <- val
}
}
}
rs<-apply(A.rcv1,1,sum)
A.rcv1 <- A.rcv1[which(rs!=0),]
y.rcv1 <- y.rcv1[which(rs!=0)]
cs <- apply(A.rcv1,2,sum)
A.rcv1 <- A.rcv1[,which(cs!=0)]
dim(A.rcv1)
save_result(CD_each_iter, "uni_rcv", sample_p = p.uniform,A = A.rcv1,y = y.rcv1,lambda = 7e-4,step0 = 1)
save_result(CD_each_iter, "uni", sample_p = p.uniform,A = A.mushrooms,y = y.mushrooms,lambda = 0.05,step0 = 1)
save_result(CD_each_iter, "uni", sample_p = p.uniform,A = A.mushrooms,y = y.mushrooms,lambda = 0.05,step0 = 1)
save_result(CD_each_iter, "uni_rcv", sample_p = p.uniform,A = A.rcv1,y = y.rcv1,lambda = 7e-4,step0 = 1)
